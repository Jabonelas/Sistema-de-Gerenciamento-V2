<?xml version="1.0" encoding="utf-8"?>
<root>
<!--***************************************************************************
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//*****************************************************************************
-->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"></xsd:import>
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0"></xsd:element>
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string"></xsd:attribute>
              <xsd:attribute name="type" type="xsd:string"></xsd:attribute>
              <xsd:attribute name="mimetype" type="xsd:string"></xsd:attribute>
              <xsd:attribute ref="xml:space"></xsd:attribute>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string"></xsd:attribute>
              <xsd:attribute name="name" type="xsd:string"></xsd:attribute>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"></xsd:element>
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2"></xsd:element>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1"></xsd:attribute>
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3"></xsd:attribute>
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4"></xsd:attribute>
              <xsd:attribute ref="xml:space"></xsd:attribute>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"></xsd:element>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required"></xsd:attribute>
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ExpressionEditorStringId.Constant_True" xml:space="preserve">
    <value>Represents the Boolean True value.</value>
  </data>
  <data name="ExpressionEditorStringId.Constant_False" xml:space="preserve">
    <value>Represents the Boolean False value.</value>
  </data>
  <data name="ExpressionEditorStringId.Constant_Null" xml:space="preserve">
    <value>Represents a null reference, one that does not refer to any object.</value>
  </data>
  <data name="ExpressionEditorStringId.Operator_Plus" xml:space="preserve">
    <value>Adds the value of one numeric expression to another, or concatenates two strings</value>
  </data>
  <data name="ExpressionEditorStringId.Operator_Minus" xml:space="preserve">
    <value>Finds the difference between two numbers.</value>
  </data>
  <data name="ExpressionEditorStringId.Operator_Multiply" xml:space="preserve">
    <value>Multiplies the value of two expressions.</value>
  </data>
  <data name="ExpressionEditorStringId.Operator_Divide" xml:space="preserve">
    <value>Divides the first operand by the second.</value>
  </data>
  <data name="ExpressionEditorStringId.Operator_Modulo" xml:space="preserve">
    <value>Returns the remainder (modulus) obtained by dividing one numeric expression into another.</value>
  </data>
  <data name="ExpressionEditorStringId.Operator_BitwiseOr" xml:space="preserve">
    <value>Compares each bit of its first operand to the corresponding bit of its second operand. If both bits are 0, the corresponding result bit is 0. Otherwise, the corresponding result bit is 1.</value>
  </data>
  <data name="ExpressionEditorStringId.Operator_BitwiseAnd" xml:space="preserve">
    <value>Compares each bit of its first operand to the corresponding bit of its second operand. If both bits are 1, the corresponding result bit is 1. Otherwise, the corresponding result bit is 0.</value>
  </data>
  <data name="ExpressionEditorStringId.Operator_BitwiseXor" xml:space="preserve">
    <value>Compares each bit of its first operand to the corresponding bit of its second operand. If both bits are equal, the corresponding result bit is 0. Otherwise, the corresponding result bit is 1.</value>
  </data>
  <data name="ExpressionEditorStringId.Operator_Equal" xml:space="preserve">
    <value>Returns true if both operands have the same value; otherwise, it returns false.</value>
  </data>
  <data name="ExpressionEditorStringId.Operator_NotEqual" xml:space="preserve">
    <value>Returns true if the operands do not have the same value; otherwise, it returns false.</value>
  </data>
  <data name="ExpressionEditorStringId.Operator_Less" xml:space="preserve">
    <value>Less than operator. Used to compare expressions.</value>
  </data>
  <data name="ExpressionEditorStringId.Operator_LessOrEqual" xml:space="preserve">
    <value>Less than or equal to operator. Used to compare expressions.</value>
  </data>
  <data name="ExpressionEditorStringId.Operator_GreaterOrEqual" xml:space="preserve">
    <value>Greater than or equal to operator. Used to compare expressions.</value>
  </data>
  <data name="ExpressionEditorStringId.Operator_Greater" xml:space="preserve">
    <value>Greater than operator. Used to compare expressions.</value>
  </data>
  <data name="ExpressionEditorStringId.Operator_In" xml:space="preserve">
    <value>In (,,,)
Tests for the existence of a property in an object.</value>
  </data>
  <data name="ExpressionEditorStringId.Operator_Like" xml:space="preserve">
    <value>Compares a string against a pattern. If the value of the string matches the pattern, result is true. If the string does not match the pattern, result is false. If both string and pattern are empty strings, the result is true.</value>
  </data>
  <data name="ExpressionEditorStringId.Operator_Between" xml:space="preserve">
    <value>Between (,)
Specifies a range to test. Returns true if a value is greater than or equal to the first operand and less than or equal to the second operand.</value>
  </data>
  <data name="ExpressionEditorStringId.Operator_And" xml:space="preserve">
    <value>Performs a logical conjunction on two expressions.</value>
  </data>
  <data name="ExpressionEditorStringId.Operator_Or" xml:space="preserve">
    <value>Performs a logical disjunction on two Boolean expressions.</value>
  </data>
  <data name="ExpressionEditorStringId.Operator_Not" xml:space="preserve">
    <value>Performs logical negation on an expression.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Max" xml:space="preserve">
    <value>Max(Value1, Value2)

Returns the maximum value from the specified values.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Min" xml:space="preserve">
    <value>Min(Value1, Value2)

Returns the minimum value from the specified values.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Abs" xml:space="preserve">
    <value>Abs(Value)

Returns the absolute, positive value of the given numeric expression.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Acos" xml:space="preserve">
    <value>Acos(Value)

Returns the arccosine of a number (the angle, in radians, whose cosine is the given float expression).</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Asin" xml:space="preserve">
    <value>Asin(Value)

Returns the arcsine of a number (the angle, in radians, whose sine is the given float expression).</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Atn" xml:space="preserve">
    <value>Atn(Value)

Returns the arctangent of a number (the angle, in radians, whose tangent is the given float expression).</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Atn2" xml:space="preserve">
    <value>Atn2(Value1, Value2)

Returns the angle whose tangent is the quotient of two specified numbers, in radians.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_BigMul" xml:space="preserve">
    <value>BigMul(Value1, Value2)

Returns an Int64 containing the full product of two specified 32-bit numbers.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Ceiling" xml:space="preserve">
    <value>Ceiling(Value)

Returns the smallest integer that is greater than or equal to the given numeric expression.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Cos" xml:space="preserve">
    <value>Cos(Value)

Returns the cosine of the angle defined in radians.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Sin" xml:space="preserve">
    <value>Sin(Value)

Returns the sine of the angle, defined in radians.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Tan" xml:space="preserve">
    <value>Tan(Value)

Returns the tangent of the angle defined in radians.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Cosh" xml:space="preserve">
    <value>Cosh(Value)

Returns the hyperbolic cosine of the angle defined in radians.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Sinh" xml:space="preserve">
    <value>Sinh(Value)

Returns the hyperbolic sine of the angle defined in radians.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Tanh" xml:space="preserve">
    <value>Tanh(Value)

Returns the hyperbolic tangent of the angle defined in radians.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Exp" xml:space="preserve">
    <value>Exp(Value)

Returns the exponential value of the given float expression.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Sqr" xml:space="preserve">
    <value>Sqr(Value)

Returns the square root of a given number Value.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Floor" xml:space="preserve">
    <value>Floor(Value)

Returns the largest integer less than or equal to the given numeric expression.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Sign" xml:space="preserve">
    <value>Sign(Value)

Returns the positive (+1), zero (0), or negative (-1) sign of the given Value.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Round" xml:space="preserve">
    <value>Round(Value)

Rounds the given Value to the nearest integer.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Round_2" xml:space="preserve">
    <value>Round(Value, Precision)

Rounds the given Value to the nearest integer, or to a specified Precision.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Log" xml:space="preserve">
    <value>Log(Value)

Returns the natural logarithm of a specified number.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Log_2" xml:space="preserve">
    <value>Log(Value, Base)

Returns the logarithm of a specified number Value in a specified Base.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Log10" xml:space="preserve">
    <value>Log10(Value)

Returns the base 10 logarithm of a specified number Value.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Power" xml:space="preserve">
    <value>Power()

Returns a specified number Value, raised to a specified Power.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Rnd" xml:space="preserve">
    <value>Rnd()

Returns a random number that is less than 1, but greater than or equal to zero.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_ToInt" xml:space="preserve">
    <value>ToInt(Value)

Converts Value to an equivalent 32-bit signed integer.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_ToLong" xml:space="preserve">
    <value>ToLong(Value)

Converts Value to an equivalent 64-bit signed integer.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_ToFloat" xml:space="preserve">
    <value>ToFloat(Value)

Converts Value to an equivalent 32-bit single-precision floating-point number.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_ToDouble" xml:space="preserve">
    <value>ToDouble(Value)

Converts Value to an equivalent 64-bit double-precision floating-point number.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_ToDecimal" xml:space="preserve">
    <value>ToDecimal(Value)

Converts Value to an equivalent decimal number.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_StartsWith" xml:space="preserve">
    <value>StartsWith(String, StartString)

Returns True if the beginning of String matches StartString; otherwise, False is returned.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_EndsWith" xml:space="preserve">
    <value>EndsWith(String, EndString)

Returns True if the end of String matches EndString; otherwise, False is returned.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Contains" xml:space="preserve">
    <value>Contains(String, SubString)

Returns True if SubString occurs within String; otherwise, False is returned.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Trim" xml:space="preserve">
    <value>Trim(String)

Removes all leading and trailing SPACE characters from String.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Len" xml:space="preserve">
    <value>Len(Value)

Returns an integer containing either the number of characters in a string or the nominal number of bytes required to store a variable.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Upper" xml:space="preserve">
    <value>Upper(String)

Returns String in uppercase.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Lower" xml:space="preserve">
    <value>Lower(String)

Returns String in lowercase.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Concat" xml:space="preserve">
    <value>Concat(String1, ... ,StringN)

Returns a string value containing the concatenation of the current string with any additional strings.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Ascii" xml:space="preserve">
    <value>Ascii(String)

Returns the ASCII code value of the leftmost character in a character expression.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Reverse" xml:space="preserve">
    <value>Reverse(String)

Reverses the order of elements within a String.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_ToStr" xml:space="preserve">
    <value>ToStr(Value)

Returns a string representation of an object.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Char" xml:space="preserve">
    <value>Char(Number)

Converts the specified ASCII integer Number to a character.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_CharIndex" xml:space="preserve">
    <value>CharIndex(String1, String2)

Returns the starting position of String1 within String2, beginning from the zero character position to the end of a string.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_CharIndex_3" xml:space="preserve">
    <value>CharIndex(String1, String2, StartLocation)

Returns the starting position of String1 within String2, beginning from the StartLocation character position to the end of a string.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_PadLeft" xml:space="preserve">
    <value>PadLeft(String, Length)

Left-aligns characters in the defined String, padding its left side with white space characters up to a specified total Length.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_PadRight" xml:space="preserve">
    <value>PadRight(String, Length)

Right-aligns characters in the defined String, padding its right side with white space characters up to a specified total Length.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_PadLeft_3" xml:space="preserve">
    <value>PadLeft(String, Length, Char)

Left-aligns characters in the defined String, padding its left side with the specified Char up to a specified total Length.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_PadRight_3" xml:space="preserve">
    <value>PadRight(String, Length, Char)

Right-aligns characters in the defined String, padding its right side with the specified Char up to a specified total Length.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Remove" xml:space="preserve">
    <value>Remove(String, StartPosition)

Deletes all characters from specified String, beginning at a specified StartPosition.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Remove_3" xml:space="preserve">
    <value>Remove(String, StartPosition, Length)

Deletes a specified Length of characters from specified String, beginning at a specified StartPosition.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Replace" xml:space="preserve">
    <value>Replace(String, SubString2, String3)

Returns a copy of String1, in which SubString2 has been replaced with String3.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Insert" xml:space="preserve">
    <value>Replace(String1, StartPosition, String2)

Inserts String2 into String1 at the position specified by StartPositon.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Substring" xml:space="preserve">
    <value>Substring(String, StartPosition)

Retrieves a substring from String. The substring starts at StartPosition.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Substring_3" xml:space="preserve">
    <value>Substring(String, StartPosition, Length)

Retrieves a substring from String. The substring starts at StartPosition and has the specified Length.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Join" xml:space="preserve">
    <value>Join(Collection)

Concatenates elements of the specified Collection, inserting comma between each element.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Join_2" xml:space="preserve">
    <value>Join(Collection, Separator)

Concatenates elements of the specified Collection, using the specified Separator between each element.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_CreateTable" xml:space="preserve">
    <value>CreateTable(Parameter1, ..., ParameterN)

Prepares a table from values of several specified multi-value parameters.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_FormatString" xml:space="preserve">
    <value>FormatString(Format, Value1, ... , ValueN)

Returns the specified string with formatted field values.
This function can accept any number of arguments.

Example:

FormatString('{0} - {1:c}', [Column1], [Column2])</value>
  </data>
  <data name="ExpressionEditorStringId.Function_NewLine" xml:space="preserve">
    <value>NewLine()

Returns the newline string defined for this environment.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Iif" xml:space="preserve">
    <value>Iif(FirstClause, FirstClauseTrueValue, ..., LastClause, LastClauseTrueValue, FalseValue)

Returns either a value defined for the first Boolean condition that is True, or the last value if none of these conditions is True.

This function can accept any number of arguments.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_IsNull" xml:space="preserve">
    <value>IsNull(Value)

Returns True if the specified Value is NULL.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_IsNull_2" xml:space="preserve">
    <value>IsNull(Value1, Value2)

Returns the second operand if the first operand is null, otherwise, the first operand is returned.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_IsNullOrEmpty" xml:space="preserve">
    <value>IsNullOrEmpty(String)

Returns True if the specified String object is NULL or an empty string; otherwise, False is returned.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_IsThisWeek" xml:space="preserve">
    <value>IsThisWeek(DateTime)

Returns True if the specified date falls within the current week.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_IsThisMonth" xml:space="preserve">
    <value>IsThisMonth(DateTime)

Returns True if the specified DateTime falls within the current month.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_IsThisYear" xml:space="preserve">
    <value>IsThisYear(DateTime)

Returns True if the specified DateTime falls within the current year.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_LocalDateTimeLastMonth" xml:space="preserve">
    <value>LocalDateTimeLastMonth()

Returns a date-time value corresponding to the first day of the previous month.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_LocalDateTimeLastYear" xml:space="preserve">
    <value>LocalDateTimeLastYear()

Returns a date-time value corresponding to the first day of the previous year.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_LocalDateTimeTwoMonthsAway" xml:space="preserve">
    <value>LocalDateTimeTwoMonthsAway()

Returns a date-time value corresponding to the first day of the month after next.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_LocalDateTimeTwoYearsAway" xml:space="preserve">
    <value>LocalDateTimeTwoYearsAway()

Returns a date-time value corresponding to the first day of the year after next.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_LocalDateTimeYearBeforeToday" xml:space="preserve">
    <value>LocalDateTimeYearBeforeToday()

Returns a date-time value corresponding to the day one year ago.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_IsJanuary" xml:space="preserve">
    <value>IsJanuary(DateTime)

Returns True if the specified DateTime falls within January.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_IsFebruary" xml:space="preserve">
    <value>IsFebruary(DateTime)

Returns True if the specified DateTime falls within February.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_IsMarch" xml:space="preserve">
    <value>IsMarch(DateTime)

Returns True if the specified DateTime falls within March.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_IsApril" xml:space="preserve">
    <value>IsApril(DateTime)

Returns True if the specified DateTime falls within April.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_IsMay" xml:space="preserve">
    <value>IsMay(DateTime)

Returns True if the specified DateTime falls within May.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_IsJune" xml:space="preserve">
    <value>IsJune(DateTime)

Returns True if the specified DateTime falls within June.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_IsJuly" xml:space="preserve">
    <value>IsJuly(DateTime)

Returns True if the specified DateTime falls within July.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_IsAugust" xml:space="preserve">
    <value>IsAugust(DateTime)

Returns True if the specified DateTime falls within August.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_IsSeptember" xml:space="preserve">
    <value>IsSeptember(DateTime)

Returns True if the specified DateTime falls within September.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_IsOctober" xml:space="preserve">
    <value>IsOctober(DateTime)

Returns True if the specified DateTime falls within October.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_IsNovember" xml:space="preserve">
    <value>IsNovember(DateTime)

Returns True if the specified DateTime falls within November.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_IsDecember" xml:space="preserve">
    <value>IsDecember(DateTime)

Returns True if the specified DateTime falls within December.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_IsLastMonth" xml:space="preserve">
    <value>IsLastMonth(DateTime)

Returns True if the specified DateTime falls within the previous month.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_IsLastYear" xml:space="preserve">
    <value>IsLastYear(DateTime)

Returns True if the specified DateTime falls within the previous year.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_IsNextMonth" xml:space="preserve">
    <value>IsNextMonth(DateTime)

Returns True if the specified DateTime falls within the next month.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_IsNextYear" xml:space="preserve">
    <value>IsNextYear(DateTime)

Returns True if the specified DateTime falls within the next year.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_IsYearToDate" xml:space="preserve">
    <value>IsYearToDate(DateTime)

Returns True if the specified DateTime falls within the year-to-date period (starting from the first day of the current year and continuing up to the current date).</value>
  </data>
  <data name="ExpressionEditorStringId.Function_IsSameDay" xml:space="preserve">
    <value>IsSameDay(DateTime, DateTime)

Returns True if the specified DateTime values fall within the same day.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_LocalDateTimeDayAfterTomorrow" xml:space="preserve">
    <value>LocalDateTimeDayAfterTomorrow()

Returns a date-time value corresponding to the day after Tomorrow.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_LocalDateTimeLastWeek" xml:space="preserve">
    <value>LocalDateTimeLastWeek()

Returns a DateTime value corresponding to the first day of the previous week.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_LocalDateTimeNextMonth" xml:space="preserve">
    <value>LocalDateTimeNextMonth()

Returns a DateTime value corresponding to the first day of next month.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_LocalDateTimeNextWeek" xml:space="preserve">
    <value>LocalDateTimeNextWeek()

Returns a DateTime value corresponding to the first day of the following week.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_LocalDateTimeNextYear" xml:space="preserve">
    <value>LocalDateTimeNextYear()

Returns a DateTime value corresponding to the first day of the following year.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_LocalDateTimeNow" xml:space="preserve">
    <value>LocalDateTimeNow()

Returns a DateTime value corresponding to the current moment in time.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_LocalDateTimeThisMonth" xml:space="preserve">
    <value>LocalDateTimeThisMonth()

Returns a DateTime value corresponding to the first day of the current month.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_LocalDateTimeThisWeek" xml:space="preserve">
    <value>LocalDateTimeThisWeek()

Returns a DateTime value corresponding to the first day of the current week.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_LocalDateTimeThisYear" xml:space="preserve">
    <value>LocalDateTimeThisYear()

Returns a DateTime value corresponding to the first day of the current year.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_LocalDateTimeToday" xml:space="preserve">
    <value>LocalDateTimeToday()

Returns a DateTime value corresponding to Today.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_LocalDateTimeTomorrow" xml:space="preserve">
    <value>LocalDateTimeTomorrow()

Returns a date-time value corresponding to Tomorrow.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_LocalDateTimeTwoWeeksAway" xml:space="preserve">
    <value>LocalDateTimeTwoWeeksAway()

Returns a date-time value corresponding to the first day of the week that is after next week.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_LocalDateTimeYesterday" xml:space="preserve">
    <value>LocalDateTimeYesterday()

Returns a date-time value corresponding to Yesterday.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_AddTicks" xml:space="preserve">
    <value>AddTicks(DateTime, AddTicks)

Returns a date-time value that is the specified number of TicksCount away from the specified DateTime.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_AddMilliSeconds" xml:space="preserve">
    <value>AddMilliSeconds(DateTime, MilliSecondsCount)

Returns a date-time value that is the specified number of MilliSecondsCount away from the specified DateTime.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_AddSeconds" xml:space="preserve">
    <value>AddSeconds(DateTime, SecondsCount)

Returns a date-time value that is the specified number of SecondsCount away from the specified DateTime.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_AddMinutes" xml:space="preserve">
    <value>AddMinutes(DateTime, MinutesCount)

Returns a date-time value that is the specified number of MinutesCount away from the specified DateTime.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_AddHours" xml:space="preserve">
    <value>AddHours(DateTime, HoursCount)

Returns a date-time value that is the specified number of HoursCount away from the specified DateTime.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_AddDays" xml:space="preserve">
    <value>AddDays(DateTime, DaysCount)

Returns a date-time value that is the specified number of DaysCount away from the specified DateTime.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_AddMonths" xml:space="preserve">
    <value>AddMonths(DateTime, MonthsCount)

Returns a date-time value that is the specified number of MonthsCount away from the specified DateTime.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_AddYears" xml:space="preserve">
    <value>AddYears(DateTime, YearsCount)

Returns a date-time value that is the specified number of YearsCount away from the specified DateTime.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_AddTimeSpan" xml:space="preserve">
    <value>AddTimeSpan(DateTime, TimeSpan)

Returns a date-time value that is away from the specified DateTime for the given TimeSpan.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_DateDiffDay" xml:space="preserve">
    <value>DateDiffDay(StartDate, EndDate)

Returns the number of day boundaries between two non-nullable dates.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_DateDiffHour" xml:space="preserve">
    <value>DateDiffHour(StartDate, EndDate)

Returns the number of hour boundaries between two non-nullable dates.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_DateDiffMilliSecond" xml:space="preserve">
    <value>DateDiffMilliSecond(StartDate, EndDate)

Returns the number of millisecond boundaries between two non-nullable dates.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_DateDiffMinute" xml:space="preserve">
    <value>DateDiffMinute(StartDate, EndDate)

Returns the number of minute boundaries between two non-nullable dates.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_DateDiffMonth" xml:space="preserve">
    <value>DateDiffMonth(StartDate, EndDate)

Returns the number of month boundaries between two non-nullable dates.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_DateDiffSecond" xml:space="preserve">
    <value>DateDiffSecond(StartDate, EndDate)

Returns the number of second boundaries between two non-nullable dates.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_DateDiffTick" xml:space="preserve">
    <value>DateDiffTick(StartDate, EndDate)

Returns the number of tick boundaries between two non-nullable dates.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_DateDiffYear" xml:space="preserve">
    <value>DateDiffYear(StartDate, EndDate)

Returns the number of year boundaries between two non-nullable dates.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_GetDate" xml:space="preserve">
    <value>GetDate(DateTime)

Extracts a date from the defined DateTime.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_GetDay" xml:space="preserve">
    <value>GetDay(DateTime)

Extracts a day from the defined DateTime.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_GetDayOfWeek" xml:space="preserve">
    <value>GetDayOfWeek(DateTime)

Extracts a day of the week from the defined DateTime.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_GetDayOfYear" xml:space="preserve">
    <value>GetDayOfYear(DateTime)

Extracts a day of the year from the defined DateTime.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_GetMilliSecond" xml:space="preserve">
    <value>GetMilliSecond(DateTime)

Extracts milliseconds from the defined DateTime.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_GetMinute" xml:space="preserve">
    <value>GetMinute(DateTime)

Extracts minutes from the defined DateTime.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_GetMonth" xml:space="preserve">
    <value>GetMonth(DateTime)

Extracts a month from the defined DateTime.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_GetSecond" xml:space="preserve">
    <value>GetSecond(DateTime)

Extracts seconds from the defined DateTime.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_GetTimeOfDay" xml:space="preserve">
    <value>GetTimeOfDay(DateTime)

Extracts the time of the day from the defined DateTime, in ticks.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_GetYear" xml:space="preserve">
    <value>GetYear(DateTime)

Extracts a year from the defined DateTime</value>
  </data>
  <data name="ExpressionEditorStringId.Function_GetHour" xml:space="preserve">
    <value>GetHour(DateTime)

Extracts an hour from the defined DateTime.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Now" xml:space="preserve">
    <value>Now()

Returns the current system date and time.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_Today" xml:space="preserve">
    <value>Today()

Returns the current date. Regardless of the actual time, this function returns midnight of the current date.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_UtcNow" xml:space="preserve">
    <value>UtcNow()

Returns the current system date and time, expressed as Coordinated Universal Time (UTC).</value>
  </data>
  <data name="ExpressionEditorStringId.Function_AvgAggregate" xml:space="preserve">
    <value>Avg()

Evaluates the average of the values in the collection.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_CountAggregate" xml:space="preserve">
    <value>Count()

Returns the number of objects in a collection.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_ExistsAggregate" xml:space="preserve">
    <value>Exists()

Determines whether the object exists in the collection.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_MaxAggregate" xml:space="preserve">
    <value>Max()

Returns the maximum expression value in a collection.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_MinAggregate" xml:space="preserve">
    <value>Min()

Returns the minimum expression value in a collection.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_SumAggregate" xml:space="preserve">
    <value>Sum()

Returns the sum of all the expression values in the collection.</value>
  </data>
  <data name="ExpressionEditorStringId.Function_SingleAggregate" xml:space="preserve">
    <value>Single()

Returns a single object from the collection.</value>
  </data>
  <data name="ExpressionEditorStringId.Exception_MalformedProperty" xml:space="preserve">
    <value>Malformed property name: missing closing "{0}".</value>
  </data>
  <data name="ExpressionEditorStringId.Exception_InvalidCharacter" xml:space="preserve">
    <value>Invalid input character: "{0}".</value>
  </data>
  <data name="ExpressionEditorStringId.Exception_WrongArgumentsCount" xml:space="preserve">
    <value>Wrong arguments count for function "{0}(...)".</value>
  </data>
  <data name="ExpressionEditorStringId.Exception_SyntaxError" xml:space="preserve">
    <value>Syntax error.</value>
  </data>
  <data name="ExpressionEditorStringId.Exception_InvalidNumericLiteral" xml:space="preserve">
    <value>Invalid numeric literal value: "{0}".</value>
  </data>
</root>
